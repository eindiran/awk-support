§ =============================================================
§  Comments
§ =============================================================

== Comments.end-of-line comment == nomenu, append, map:ce, sc:e ==
 # <CURSOR>
== Comments.frame == map:cfr, sc:r ==
#-------------------------------------------------------------------------------
# <CURSOR>
#-------------------------------------------------------------------------------
== Comments.function == map:cfu, sc:f ==
#===  FUNCTION  ================================================================
#          NAME:  |?FUNCTION_NAME:c|     {{{1
#   DESCRIPTION:  <CURSOR>
#    PARAMETERS:  -|PARAMETERS:EMPTY|
#    PARAMETERS:  |PARAMETERS:FIRST| - {+DESCRIPTION+}
#                 |PARAMETERS:ENTRY| - {+DESCRIPTION+}
#       RETURNS:
#===============================================================================
== Comments.file description == start, map:ch ==
#===============================================================================
#
#          FILE:  |FILENAME|
#
#         USAGE: ./|FILENAME| [--help] [--version]
#
#   DESCRIPTION:  <CURSOR>
#
#       OPTIONS:
#                 --help: Print the usage and exit
#                 --version: Print the version and exit
#
#        AUTHOR:  |AUTHOR| <|EMAIL|>
#  ORGANIZATION:  |ORGANIZATION|
#      REVISION:  |SEMVER_REV|
#
#===============================================================================

BEGIN {
    PROGRAM = "|FILENAME|"
    VERSION = "|SEMVER_REV|"
    errno = 0
    for (argnum = 1; argnum < ARGC; argnum++) {
        arg = ARGV[argnum]
        if (arg == "--help") {
            opt_help = 1
        } else if (arg == "--version") {
            opt_version = 1
        } else {
            printf "%s: error: unknown option '%s'\n", PROGRAM, arg >"/dev/stderr"
            exit errno = 1
        }
        delete ARGV[argnum]
    }
    if (opt_help) {
        printf "usage: %s [--help] [--version]\n", PROGRAM
        exit
    }
    if (opt_version) {
        printf "%s v%s", PROGRAM, VERSION
        exit
    }
}

{
    # main
}

END {
    exit errno
}
== Comments.shebang == start, map:csh ==
#!|AWK_INTERPRETER| -f
== ENDTEMPLATE ==

§ -------------------------------------------------------------

== SEP: Comments.sep-date-time ==

== Comments.date == insert, map:cd, sc:d ==
|DATE|
== Comments.date-time == insert, map:ct, sc:t ==
|DATE| |TIME|
== ENDTEMPLATE ==

§ -------------------------------------------------------------
§  Keywords, Special and Macros
§ -------------------------------------------------------------

== LIST: comments_keywords == hash ==
	'bug'         : ':BUG:|DATE| |TIME|:|AUTHORREF|: <CURSOR>',
	'todo'        : ':TODO:|DATE| |TIME|:|AUTHORREF|: <CURSOR>',
	'tricky'      : ':TRICKY:|DATE| |TIME|:|AUTHORREF|: <CURSOR>',
	'warning'     : ':WARNING:|DATE| |TIME|:|AUTHORREF|: <CURSOR>',
	'workaround'  : ':WORKAROUND:|DATE| |TIME|:|AUTHORREF|: <CURSOR>',
	'new keyword' : ':<CURSOR>:|DATE| |TIME|:|AUTHORREF|: {+COMMENT+}',
== LIST: comments_macros == hash ==
	'AUTHOR'       : '|AUTHOR|',
	'AUTHORREF'    : '|AUTHORREF|',
	'COMPANY'      : '|COMPANY|',
	'COPYRIGHT'    : '|COPYRIGHT|',
	'EMAIL'        : '|EMAIL|',
	'ORGANIZATION' : '|ORGANIZATION|',
== ENDLIST ==

§ -------------------------------------------------------------

== Comments.keyword comments == expandmenu, append, map:ck, sc:k ==
|PickList( 'keyword comment', 'comments_keywords' )|
 # |PICK|
== Comments.macros == expandmenu, insert, map:cma, sc:m ==
|PickList( 'macro', 'comments_macros' )|
|PICK|
== ENDTEMPLATE ==

